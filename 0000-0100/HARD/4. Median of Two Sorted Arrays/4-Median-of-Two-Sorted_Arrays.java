//Временная сложность: O(m+n)
//
//Подход 2: два указателя
//
//Мы создаем новый массив длиной, равной сумме длин массивов
//Мы инициализируем i & j = 0. [i для  nums1 и j для nums2]
//Поскольку данные массивы уже отсортированы, легко сравнить их элементы. Мы начинаем с наблюдения nums1 [i] < nums2 [j]
//если элемент в nums1 < nums2,
//мы добавляем nums1[i] к новому массиву и увеличиваем i;
//чтобы сравнить следующий элемент массива с nums2[j].
//Если возникает противоположный случай, мы добавляем nums2[j] в новый массив, как вы можете догадаться.
//И увеличьте j на 1 по тем же причинам, по которым мы сделали это с i .
//В зависимости от длины нового массива мы вычисляем медиану.
//Если длина массива четная, медиана по правилу равна среднему значению 2 средних элементов массива
//Если значение нечетное, это самый средний элемент


class Solution {
    public double findMedianSortedArrays(int[] nums1, int[] nums2) {
        int l1 = nums1.length;
        int l2 = nums2.length;

        int n = l1 + l2;

        int[] arr = new int[n];

        int i = 0, j = 0, k = 0;

        while(i <= l1 && j <= l2){

            if(i == l1 && j == l2){
                break;
            }

            if(i == l1){
                arr[k++] = nums2[j];
                j++;
                continue;
            }
            if(j == l2){
                arr[k++] = nums1[i];
                i++;
                continue;
            }

            if(nums1[i] < nums2[j]){
                arr[k++] = nums1[i];
                i++;
            }else{
                arr[k++] = nums2[j];
                j++;
            }
        }

        if(n % 2 == 0){
            return (arr[n / 2] + arr[n / 2 - 1]) / 2.0;
        }else{
            return(double) arr[n / 2];
        }


    }
}